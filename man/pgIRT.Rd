% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pgIRT.R
\name{pgIRT}
\alias{pgIRT}
\title{Polya-Gamma IRT with EM algorithm}
\usage{
pgIRT(
  data,
  model = c("default", "dynamic"),
  init = NULL,
  prior = NULL,
  constraint = NULL,
  std = FALSE,
  dyn_options = NULL,
  maxit = 500,
  tol = 1e-06,
  verbose = NULL
)
}
\arguments{
\item{data}{a matrix, data.frame or tbl_df of roll-call (i.e. individual-item) matrix (I x J). The elements should start from 1 and missing values should be NA.}

\item{model}{a string, one of "default" or "dynamic".}

\item{init}{a list, containing initial values. If not supplied, the function automatically set them from the data.
\itemize{
\item \code{alpha} J x K-1 matrix of alpha.
\item \code{beta} J x K-1 matrix of beta.
\item \code{theta} I x T (sessions) matrix of theta. For default model, T = 1.
}}

\item{prior}{a list, containing prior distribution:
\itemize{
\item \code{a0} a double or J x K matrix, prior mean of alpha. Default is 0.
\item \code{A0} a double or J x K matrix, prior variance of alpha. Default is 25.
\item \code{b0} a double or J x K matrix, prior mean of beta Default is 0.
\item \code{B0} a double or J x K matrix, prior variance of beta. Default is 25.
\item \code{theta0} a double or I length vector, prior mean of theta_i0 for dynamic model. Default is 0.
\item \code{Delta0} a double or I length vector, prior variance of theta_i0 for dynamic model. Default is 1.
\item \code{Delta} a double, prior evolution variance of theta_it for dynamic model. Default is 0.01.
}}

\item{constraint}{an integer scalar or vector (for dynamic model, the same length as the number of sessions),
index of the voter i (the location of i) whose ideal point is always set positive.}

\item{std}{a bool, whether ideal points are standardized or not. Default is FALSE.}

\item{dyn_options}{a list, containing the options for dynamic model. If you choose "dynamic" for \code{model}, you must supply this argument. Using \link{make_dyn_options}() is strongly recommended:
\itemize{
\item \code{session_individual} an integer matrix, the first column contains attending sessions (starts from 1) of individuals and
the second column contains the identifiers of individuals.
\item \code{bill_session} an integer vector, indicating the sessions each bill belongs to (starts from 1).
\item \code{matched_bill} (Optional). An integer vector which indicates matched bills (the location of matched bills, starts from 1)
and is the same length as the number of bills. If a bill does not have matches, please fill NA. Using \link{make_bill_match} is strongly recommended.
}}

\item{maxit}{am integer, maximum number of iterations for EM. Default is 500.}

\item{tol}{a double (< 1), convergence threshold. Default is 1e-6.}

\item{verbose}{a integer, the function prints the status every \code{verbose}. Default is NULL.}
}
\description{
\link{pgIRT} estimates IRT model with Polya-Gamma data augmentation and EM algorithm. The function is available for
the data containing K >= 2 response category (binary ~ K-multinomial) and having different categories across items j.
}
\examples{
\dontrun{
# Binary model (K = 2)
I <- 100
J <- 1000
theta_true <- seq(-2, 2, length = I)
alpha_true <- rnorm(J)
beta_true <- rnorm(J)
Y_star <- cbind(1, theta_true) \%*\% rbind(alpha_true, beta_true)
Y <- matrix(rbinom(I * J, 1, plogis(Y_star)), I, J)
Y[Y == 0] <- 2 # Elements should start from 1 for `pgIRT`
pgfit <- pgIRT(Y,
               model = "default",
               constraint = which.max(theta_true))
cor(pgfit$parameter$theta, theta_true)


# Multinomial model (K >= 2)
data(m_data_dyn)
mat <- make_rollcall(m_data_dyn,
                     unit_id = "unit",
                     bill_id = "bill",
                     vote_col = "vote")
mat <- clean_rollcall(mat)
pgfit_mlt <- pgIRT(mat,
                   model = "default",
                   constraint = 1)
summary(pgfit_mlt, parameter = "theta")


# Dynamic multinomial model 
ops <- make_dyn_ops(m_data_dyn,
                    unit_id = "unit",
                    bill_id = "bill",
                    time_id = "time",
                    vote_col = "vote",
                    clean = TRUE)
pgfit_mlt_dyn <- pgIRT(mat,
                       model = "dynamic",
                       dyn_options = ops,
                       constraint = 1)
summary(pgfit_mlt_dyn, parameter = "theta")
}
}
