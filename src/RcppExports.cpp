// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// EMstep
List EMstep(const arma::mat& Y, const arma::mat& alpha, const arma::mat& beta, const arma::vec& theta, const arma::vec& max_cat, const int& constraint, const arma::mat& a0, const arma::mat& A0, const arma::mat& b0, const arma::mat& B0, const int& maxit, const double& tol, const int& verbose, const bool& std);
RcppExport SEXP _pgIRT_EMstep(SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP thetaSEXP, SEXP max_catSEXP, SEXP constraintSEXP, SEXP a0SEXP, SEXP A0SEXP, SEXP b0SEXP, SEXP B0SEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP stdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type max_cat(max_catSEXP);
    Rcpp::traits::input_parameter< const int& >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type std(stdSEXP);
    rcpp_result_gen = Rcpp::wrap(EMstep(Y, alpha, beta, theta, max_cat, constraint, a0, A0, b0, B0, maxit, tol, verbose, std));
    return rcpp_result_gen;
END_RCPP
}
// dyn_EMstep
List dyn_EMstep(const arma::mat& Y, const arma::mat& alpha, const arma::mat& beta, const arma::mat& theta, const arma::vec& max_cat, const arma::vec& constraint, const arma::mat& a0, const arma::mat& A0, const arma::mat& b0, const arma::mat& B0, const arma::vec& theta0, const arma::vec& Delta0, const arma::mat& Delta, const arma::mat& session_individual, const arma::vec& bill_session, const arma::vec& matched_bill, const int& maxit, const double& tol, const int& verbose, const bool& std);
RcppExport SEXP _pgIRT_dyn_EMstep(SEXP YSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP thetaSEXP, SEXP max_catSEXP, SEXP constraintSEXP, SEXP a0SEXP, SEXP A0SEXP, SEXP b0SEXP, SEXP B0SEXP, SEXP theta0SEXP, SEXP Delta0SEXP, SEXP DeltaSEXP, SEXP session_individualSEXP, SEXP bill_sessionSEXP, SEXP matched_billSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP stdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type max_cat(max_catSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type constraint(constraintSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Delta0(Delta0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type session_individual(session_individualSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bill_session(bill_sessionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type matched_bill(matched_billSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type std(stdSEXP);
    rcpp_result_gen = Rcpp::wrap(dyn_EMstep(Y, alpha, beta, theta, max_cat, constraint, a0, A0, b0, B0, theta0, Delta0, Delta, session_individual, bill_session, matched_bill, maxit, tol, verbose, std));
    return rcpp_result_gen;
END_RCPP
}
// prediction
List prediction(const arma::mat& alpha, const arma::mat& beta, const arma::mat& theta, const arma::vec& max_cat, const arma::vec& bill_session, const String& model, const String& type);
RcppExport SEXP _pgIRT_prediction(SEXP alphaSEXP, SEXP betaSEXP, SEXP thetaSEXP, SEXP max_catSEXP, SEXP bill_sessionSEXP, SEXP modelSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type max_cat(max_catSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bill_session(bill_sessionSEXP);
    Rcpp::traits::input_parameter< const String& >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const String& >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(prediction(alpha, beta, theta, max_cat, bill_session, model, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pgIRT_EMstep", (DL_FUNC) &_pgIRT_EMstep, 14},
    {"_pgIRT_dyn_EMstep", (DL_FUNC) &_pgIRT_dyn_EMstep, 20},
    {"_pgIRT_prediction", (DL_FUNC) &_pgIRT_prediction, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_pgIRT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
